<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<!-- string -->
	<xs:element name="string_single_quotes">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="string('NaN') eq data('string', ['NaN'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="string_without_quotes">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="string(NaN)"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- boolean -->
	<xs:element name="boolean_1">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="boolean('1') eq data('boolean', [true])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="boolean_true">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="boolean('true') eq data('boolean', [true])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="boolean_0">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="boolean('0') eq data('boolean', [false])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="boolean_false">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="boolean('false') eq data('boolean', [false])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="boolean_arbitrary">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="boolean('arbitrary') eq data('boolean', [true])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- decimal -->
	<xs:element name="decimal_long_positive">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="decimal('+1.234') eq data('decimal', [1.234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="decimal_short_negative">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="decimal('.234') eq data('decimal', [0.234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="decimal_invalid">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="decimal('test')"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- float -->
	<xs:element name="float_common">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('-3.1415') eq data('float', [-3.1415])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_negative_zero">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('-0') eq data('float', [0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_scientific_short">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('-3E2') eq data('float', [-300.0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_scientific_long">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('4268.22752E11') eq data('float', [426822752000000.0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_infinity">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('-INF') eq data('float', [-inf])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_NaN">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('NaN') eq data('float', [nan])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="float_invalid">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="float('NAN')"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- double -->
	<xs:element name="double_common">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('-3.1415') eq data('double', [-3.1415])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_negative_zero">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('-0') eq data('double', [0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_scientific_short">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('-3E2') eq data('double', [-300.0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_scientific_long">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('4268.22752E11') eq data('double', [426822752000000.0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_infinity">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('-INF') eq data('double', [-inf])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_NaN">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('NaN') eq data('double', [nan])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="double_invalid">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="double('NAN')"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- duration -->
	<xs:element name="duration_full">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="duration('P2Y6M5DT12H35M30S') eq data('duration', [+, 2, 6, 5, 12, 35, 30])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="duration_months_only">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="duration('P2M') eq data('duration', [+, 0, 2, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="duration_minutes_seconds_only">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="duration('-PT01M30.5S') eq data('duration', [+, 0, 0, 0, 0, 1, 30.5])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="duration_neutral">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="duration('-P0Y') eq data('duration', [+, 0, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="duration_unnormalized">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="duration('P2Y13M40DT30H65M92S') eq data('duration', [+, 3, 2, 10, 7, 6, 32])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- dateTime -->
	<xs:element name="dateTime_BC_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('-0032-04-12T13:20:00') eq data('dateTime', [-32, 4, 12, 13, 20, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_BC_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('-0032-04-12T13:20:00Z') eq data('dateTime', [-32, 4, 12, 13, 20, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_BC_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('-12345-04-12T13:20:00-14:00') eq data('dateTime', [-12345, 4, 12, 13, 20, 0, -840])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_BC_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('-1234-04-12T13:20:00+14:00') eq data('dateTime', [-1234, 4, 12, 13, 20, 0, 840])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_AD_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('0000-01-01T00:00:00') eq data('dateTime', [0, 1, 1, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_AD_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12T13:20:00Z') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_AD_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12T13:20:00-05:00') eq data('dateTime', [2004, 4, 12, 13, 20, 0, -300])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_AD_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12T13:20:00+11:59') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 719])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_merge_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12', '13:20:00') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_merge_same_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12+01:30', '13:20:00+01:30') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 90])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_merge_date_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12+01:30', '13:20:00') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 90])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_merge_time_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12', '13:20:00+01:30') eq data('dateTime', [2004, 4, 12, 13, 20, 0, 90])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dateTime_merge_different_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dateTime('2004-04-12-01:30', '13:20:00+01:30')"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- time -->
	<xs:element name="time_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="time('13:20:30.5555') eq data('time', [0, 0, 0, 13, 20, 30.5555, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="time_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="time('07:39:00Z') eq data('time', [0, 0, 0, 7, 39, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="time_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="time('13:20:00-05:20') eq data('time', [0, 0, 0, 13, 20, 0, -320])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="time_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="time('13:20:00+10:45') eq data('time', [0, 0, 0, 13, 20, 0, 645])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- date -->
	<xs:element name="date_BC_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('-0032-01-01') eq data('date', [-32, 1, 1, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_BC_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('-0032-04-12Z') eq data('date', [-32, 4, 12, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_BC_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('-0032-04-12-12:11') eq data('date', [-32, 4, 12, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_BC_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('-0032-04-12+06:39') eq data('date', [-32, 4, 12, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_AD_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('12004-04-12') eq data('date', [12004, 4, 12, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_AD_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('2004-04-12Z') eq data('date', [2004, 4, 12, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_AD_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('2004-04-12-13:59') eq data('date', [2004, 4, 12, 0, 0, 0, -839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="date_AD_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="date('2004-04-12+13:59') eq data('date', [2004, 4, 12, 0, 0, 0, 839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- gYearMonth -->
	<xs:element name="gYearMonth_BC_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('-0032-01') eq data('gYearMonth', [-32, 1, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_BC_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('-0032-04Z') eq data('gYearMonth', [-32, 4, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_BC_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('-0032-04-12:11') eq data('gYearMonth', [-32, 4, 0, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_BC_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('-0032-04+06:39') eq data('gYearMonth', [-32, 4, 0, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_AD_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('12004-04') eq data('gYearMonth', [12004, 4, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_AD_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('2004-04Z') eq data('gYearMonth', [2004, 4, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_AD_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('2004-04-13:59') eq data('gYearMonth', [2004, 4, 0, 0, 0, 0, -839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYearMonth_AD_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYearMonth('2004-04+13:59') eq data('gYearMonth', [2004, 4, 0, 0, 0, 0, 839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- gYear -->
	<xs:element name="gYear_BC_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('-0032') eq data('gYear', [-32, 0, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_BC_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('-0032Z') eq data('gYear', [-32, 0, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_BC_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('-0032-12:11') eq data('gYear', [-32, 0, 0, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_BC_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('-0032+06:39') eq data('gYear', [-32, 0, 0, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_AD_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('12004') eq data('gYear', [12004, 0, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_AD_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('2004Z') eq data('gYear', [2004, 0, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_AD_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('2004-13:59') eq data('gYear', [2004, 0, 0, 0, 0, 0, -839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gYear_AD_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gYear('2004+13:59') eq data('gYear', [2004, 0, 0, 0, 0, 0, 839])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- gMonthDay -->
	<xs:element name="gMonthDay_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonthDay('--01-01') eq data('gMonthDay', [0, 1, 1, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonthDay_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonthDay('--04-12Z') eq data('gMonthDay', [0, 4, 12, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonthDay_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonthDay('--04-12-12:11') eq data('gMonthDay', [0, 4, 12, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonthDay_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonthDay('--04-12+06:39') eq data('gMonthDay', [0, 4, 12, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- gDay -->
	<xs:element name="gDay_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gDay('---01') eq data('gDay', [0, 0, 1, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gDay_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gDay('---12Z') eq data('gDay', [0, 0, 12, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gDay_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gDay('---12-12:11') eq data('gDay', [0, 0, 12, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gDay_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gDay('---12+06:39') eq data('gDay', [0, 0, 12, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- gMonth -->
	<xs:element name="gMonth_no_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonth('--01') eq data('gMonth', [0, 1, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonth_UTC_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonth('--04Z') eq data('gMonth', [0, 4, 0, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonth_negative_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonth('--04-12:11') eq data('gMonth', [0, 4, 0, 0, 0, 0, -731])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="gMonth_positive_TC">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="gMonth('--04+06:39') eq data('gMonth', [0, 4, 0, 0, 0, 0, 399])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- hexBinary -->
	<xs:element name="hexBinary_uc">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="hexBinary('0FB8') eq data('hexBinary', ['0FB8'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="hexBinary_lc">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="hexBinary('0fb8') eq data('hexBinary', ['0FB8'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="hexBinary_empty">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="hexBinary('') eq data('hexBinary', [''])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- base64Binary -->
	<xs:element name="base64Binary_uc_ws">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="base64Binary('0 FB8 0F+9') eq data('base64Binary', ['0FB80F+9'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="base64Binary_lc_pad">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="base64Binary('0F+40A==') eq data('base64Binary', ['0F+40A=='])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="base64Binary_empty">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="base64Binary('') eq data('base64Binary', [''])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- anyURI -->
	<xs:element name="anyURI">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="anyURI('https://john.doe@www.example.com:123/forum/questions/?tag=networking#top') eq data('anyURI', ['https://john.doe@www.example.com:123/forum/questions/?tag=networking#top'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- QName -->
	<xs:element name="QName">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="QName('pre:myElement') eq data('QName', ['pre:myElement'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- normalizedString -->
	<xs:element name="normalizedString_spaces">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="normalizedString('   Separated by 3 spaces.') eq data('normalizedString', ['   Separated by 3 spaces.'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="normalizedString_linebreak">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="normalizedString('This
	is on two lines.') eq data('normalizedString', ['This  is on two lines.'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- token -->
	<xs:element name="token">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="token('This is a string!') eq data('token', ['This is a string!'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- language -->
	<xs:element name="language">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="language('en-US') eq data('language', ['en-US'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- NMTOKEN -->
	<xs:element name="NMTOKEN_normalized">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="NMTOKEN('123_456') eq data('NMTOKEN', ['123_456'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="NMTOKEN_unnormalized">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="NMTOKEN('   additional_spaces_around   ') eq data('NMTOKEN', ['additional_spaces_around'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- NCName -->
	<xs:element name="NCName">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="NCName('_my-element') eq data('NCName', ['_my-element'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- Name -->
	<xs:element name="Name">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="Name('_my:element') eq data('Name', ['_my:element'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- ID -->
	<xs:element name="ID">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="ID('_my-element') eq data('ID', ['_my-element'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- IDREF -->
	<xs:element name="IDREF">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="IDREF('_my-element') eq data('IDREF', ['_my-element'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- ENTITY -->
	<xs:element name="ENTITY">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="ENTITY('_my-element') eq data('ENTITY', ['_my-element'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- integer -->
	<xs:element name="integer_leading_zeroes">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="integer('0123') eq data('integer', [123])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="integer_positive">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="integer('+123') eq data('integer', [123])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="integer_negative">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="integer('-123') eq data('integer', [-123])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- nonPositiveInteger -->
	<xs:element name="nonPositiveInteger">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="nonPositiveInteger('-01234') eq data('nonPositiveInteger', [-1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- negativeInteger -->
	<xs:element name="negativeInteger">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="negativeInteger('-1234') eq data('negativeInteger', [-1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- long -->
	<xs:element name="long">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="long('-21474836480') eq data('long', [-21474836480])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- int -->
	<xs:element name="int">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="int('-123') eq data('int', [-123])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- short -->
	<xs:element name="short">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="short('-1234') eq data('short', [-1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- byte -->
	<xs:element name="byte">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="byte('-128') eq data('byte', [-128])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- nonNegativeInteger -->
	<xs:element name="nonNegativeInteger">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="nonNegativeInteger('1234') eq data('nonNegativeInteger', [1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- unsignedLong -->
	<xs:element name="unsignedLong">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="unsignedLong('18446744073709551615') eq data('unsignedLong', [18446744073709551615])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- unsignedInt -->
	<xs:element name="unsignedInt">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="unsignedInt('1234') eq data('unsignedInt', [1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- unsignedShort -->
	<xs:element name="unsignedShort">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="unsignedShort('65432') eq data('unsignedShort', [65432])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- unsignedByte -->
	<xs:element name="unsignedByte">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="unsignedByte('255') eq data('unsignedByte', [255])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- positiveInteger -->
	<xs:element name="positiveInteger">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="positiveInteger('1234') eq data('positiveInteger', [1234])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- yearMonthDuration -->
	<xs:element name="yearMonthDuration_full">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="yearMonthDuration('P2Y6M') eq data('yearMonthDuration', [+, 2, 6, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="yearMonthDuration_months_only">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="yearMonthDuration('P20M') eq data('yearMonthDuration', [+, 1, 8, 0, 0, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- dayTimeDuration -->
	<xs:element name="dayTimeDuration_full">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dayTimeDuration('P5DT12H35M30S') eq data('dayTimeDuration', [+, 0, 0, 5, 12, 35, 30])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dayTimeDuration_minutes_only">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dayTimeDuration('PT120M') eq data('dayTimeDuration', [+, 0, 0, 0, 2, 0, 0])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<xs:element name="dayTimeDuration_seconds_only">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="dayTimeDuration('PT65.5S') eq data('dayTimeDuration', [+, 0, 0, 0, 0, 1, 5.5])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- untypedAtomic -->
	<xs:element name="untypedAtomic">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:assertion test="untypedAtomic('ß汉98af é▓fioe') eq data('untypedAtomic', ['ß汉98af é▓fioe'])"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
</xs:schema>